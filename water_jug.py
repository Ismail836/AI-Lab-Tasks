# -*- coding: utf-8 -*-
"""Water Jug.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/114CRsf4YdfjaLgq-TTFDd7jcK3f3O4j7
"""



"""# A*

"""

import heapq

JUG1 = 4
JUG2 = 3
GOAL = 1

def heuristic(state):
    x, y = state
    return min(abs(x - GOAL), abs(y - GOAL))

def a_star_water_jug():
    start = (0, 0)
    open_list = []
    heapq.heappush(open_list, (heuristic(start), 0, [start]))
    visited = {}

    while open_list:
        f, g, path = heapq.heappop(open_list)
        state = path[-1]

        if state[0] == GOAL or state[1] == GOAL:
            return path

        if state in visited and visited[state] <= g:
            continue
        visited[state] = g

        x, y = state
        next_states = [
            (JUG1, y),
            (x, JUG2),
            (0, y),
            (x, 0),
            (x - min(x, JUG2 - y), y + min(x, JUG2 - y)),
            (x + min(y, JUG1 - x), y - min(y, JUG1 - x))
        ]

        for nxt in next_states:
            if nxt not in visited or g + 1 < visited.get(nxt, float('inf')):
                new_path = list(path)
                new_path.append(nxt)
                new_g = g + 1
                new_f = new_g + heuristic(nxt)
                heapq.heappush(open_list, (new_f, new_g, new_path))

solution = a_star_water_jug()
print("A* Solution path:")
for step in solution:
    print(step)

"""# DFS

"""

import heapq

JUG1 = 4
JUG2 = 3
GOAL = 1

def water_jug_dfs():
    start = (0, 0)
    stack = [[start]]
    visited = set()

    while stack:
        path = stack.pop()
        state = path[-1]

        if state[0] == GOAL or state[1] == GOAL:
            return path

        if state in visited:
            continue
        visited.add(state)

        x, y = state

        next_states = [
            (JUG1, y),
            (x, JUG2),
            (0, y),
            (x, 0),
            (x - min(x, JUG2 - y), y + min(x, JUG2 - y)),
            (x + min(y, JUG1 - x), y - min(y, JUG1 - x))
        ]

        for nxt in next_states:
            if nxt not in visited:
                new_path = list(path)
                new_path.append(nxt)
                stack.append(new_path)
    return None

solution = water_jug_dfs()
print("DFS Solution path:")
for step in solution:
    print(step)

"""# BFS"""

from collections import deque

JUG1 = 4
JUG2 = 3
GOAL = 1

def water_jug_bfs():
    start = (0, 0)
    visited = set()
    queue = deque([[start]])

    while queue:
        path = queue.popleft()
        state = path[-1]

        if state[0] == GOAL or state[1] == GOAL:
            return path

        if state in visited:
            continue
        visited.add(state)

        x, y = state

        next_states = [
            (JUG1, y),
            (x, JUG2),
            (0, y),
            (x, 0),
            (x - min(x, JUG2 - y), y + min(x, JUG2 - y)),
            (x + min(y, JUG1 - x), y - min(y, JUG1 - x))
        ]

        for nxt in next_states:
            if nxt not in visited:
                new_path = list(path)
                new_path.append(nxt)
                queue.append(new_path)
    return None

solution = water_jug_bfs()
print("BFS Solution path:")
for step in solution:
    print(step)